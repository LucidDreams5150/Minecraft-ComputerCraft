-- BaseControl — Installer (basectl_install.lua)
-- Version: v0.6.1
-- Date: 2025-09-13
-- Purpose: One-shot installer for modular BaseControl under /basectl on your Pocket.
-- This installer includes **everything** we've built so far (fresh install ready).
--
-- Highlights:
--   • Utilities page (page_utils.lua) with modem tools, ping, broadcast, label set, info panel
--   • Header shows app version next to "Base Control"; server badge on the right
--   • Labels page: scrolling list, per-monitor editors (BG/FG/Scale/PadX/PadY), Defaults editor
--   • Server: bumpNow() + live broadcast on save; header live refresh on 1s timer
--   • Safe config writer; updater + PKG manifest for `basectl_update`
--
-- Usage:
--   basectl_install       -- writes all modules + PKG + self-updater
--   /basectl/main         -- launch Base Control
--   basectl_update        -- one-command refresh from /basectl/PKG.lua

local function write_file(path, content)
  local dir = fs.getDir(path)
  if dir ~= "" and not fs.exists(dir) then fs.makeDir(dir) end
  local f = fs.open(path, "w")
  f.write(content)
  f.close()
  print("wrote "..path)
end

local FILES = {}

FILES["/basectl/util.lua"] = [=[
-- util.lua  v0.4.1
local M = {}

function M.clamp(n, lo, hi)
  if n < lo then return lo elseif n > hi then return hi else return n end
end

function M.clear()
  term.setBackgroundColor(colors.black)
  term.setTextColor(colors.white)
  term.clear(); term.setCursorPos(1,1)
end

function M.centerY()
  local _, h = term.getSize()
  return math.floor(h/2)
end

function M.inputPrompt(prompt, default)
  term.setTextColor(colors.yellow)
  write(prompt)
  term.setTextColor(colors.white)
  if default ~= nil and default ~= "" then write(" ["..tostring(default).."] ") end
  term.setCursorBlink(true)
  local s = read()
  term.setCursorBlink(false)
  if (s == nil or s == "") and default ~= nil then return default end
  return s
end

M.COLOR_NAMES = {
  "white","orange","magenta","lightBlue","yellow","lime","pink","gray",
  "lightGray","cyan","purple","blue","brown","green","red","black",
}

function M.isValidColorName(name)
  for _,n in ipairs(M.COLOR_NAMES) do if n == name then return true end end
  return false
end

function M.openWirelessOrError()
  local opened = false
  if peripheral.getType("back") == "modem" then
    if not rednet.isOpen("back") then rednet.open("back") end
    opened = true
  end
  for _, side in ipairs(peripheral.getNames()) do
    if peripheral.getType(side) == "modem" then
      local m = peripheral.wrap(side)
      if m and (m.isWireless == nil or m.isWireless()) then
        if not rednet.isOpen(side) then rednet.open(side) end
        opened = true
      end
    end
  end
  if opened then return true end
  local t = os.startTimer(1)
  while true do
    local ev, a = os.pullEvent()
    if ev == "peripheral" and peripheral.getType(a) == "modem" then
      local m = peripheral.wrap(a)
      if m and (m.isWireless == nil or m.isWireless()) then
        if not rednet.isOpen(a) then rednet.open(a) end
        return true
      end
    elseif ev == "timer" and a == t then break end
  end
  error("No wireless or Ender modem found.")
end

function M.versionOf(tbl)
  local s = textutils.serialize(tbl)
  local sum = 0; for i = 1, #s do sum = (sum * 31 + s:byte(i)) % 2147483647 end
  return ("%08x"):format(sum)
end

return M
]=]

FILES["/basectl/store.lua"] = [=[
-- store.lua  v0.3.0
-- File access helpers for BaseControl
local M = {}

M.LABELS_CFG_PATH = "/labels_config.lua"
M.BASE_CFG_PATH   = "/base_control_config.lua"

function M.ensureFiles()
  if not fs.exists(M.LABELS_CFG_PATH) then
    local f = fs.open(M.LABELS_CFG_PATH, "w")
    f.write("return " .. textutils.serialize({
      defaults = {
        bg = "gray",
        fg = "purple",
        text_scale = nil,
        align = "center",
        pad_x = 0,
        pad_y = 0,
        clear_on_draw = true,
        autodiscover = true,
        default_label_template = "Monitor $n",
      },
      monitors = {},
    }) .. "
")
    f.close()
  end
  if not fs.exists(M.BASE_CFG_PATH) then
    local f = fs.open(M.BASE_CFG_PATH, "w")
    f.write("return " .. textutils.serialize({
      generators = {
        -- Example: { name = 'Reactor A', host = 'gen-reactor-a' },
      },
    }) .. "
")
    f.close()
  end
end

function M.loadLabelsCfg()
  local ok, t = pcall(dofile, M.LABELS_CFG_PATH)
  if ok and type(t) == "table" then return t end
  return { defaults = {}, monitors = {} }
end

function M.saveLabelsCfg(t)
  local f = fs.open(M.LABELS_CFG_PATH, "w")
  f.write("return " .. textutils.serialize(t) .. "
")
  f.close()
end

function M.loadBaseCfg()
  local ok, t = pcall(dofile, M.BASE_CFG_PATH)
  if ok and type(t) == "table" then return t end
  return { generators = {} }
end

return M
]=]

FILES["/basectl/server.lua"] = [=[
-- server.lua  v0.4.1
-- Labels Config Server: hosts DNS, serves config, broadcasts change events with versions.

local M = {}

function M.start(state, store, util, proto, name)
  if rednet.unhost then pcall(rednet.unhost, proto, name) end
  rednet.host(proto, name)
  state.serverOn = true
  local cfg = store.loadLabelsCfg()
  state.serverPrevVersion = state.serverPrevVersion or nil
  state.serverVersion = util.versionOf(cfg)
  state.serverTimerId = os.startTimer(1)
end

function M.stop(state, proto, name)
  if rednet.unhost then pcall(rednet.unhost, proto, name) end
  state.serverOn = false
  state.serverTimerId = nil
end

function M.bumpNow(state, store, util, proto)
  local cfg = store.loadLabelsCfg()
  local ver = util.versionOf(cfg)
  if ver ~= state.serverVersion then
    state.serverPrevVersion = state.serverVersion
    state.serverVersion = ver
    rednet.broadcast({ cmd = "changed", version = ver }, proto)
  end
end

function M.handleEvent(state, ev, a, b, c, store, util, proto)
  if not state.serverOn then return end
  if ev == "rednet_message" then
    local sender, msg, protoIn = a, b, c
    if protoIn == proto and type(msg) == "table" then
      local cfg = store.loadLabelsCfg()
      if msg.cmd == "get" then
        rednet.send(sender, { ok = true, cfg = cfg, version = util.versionOf(cfg) }, proto)
      elseif msg.cmd == "get_if_new" then
        local ver = util.versionOf(cfg)
        if msg.known_version == ver then
          rednet.send(sender, { ok = true, up_to_date = true, version = ver }, proto)
        else
          rednet.send(sender, { ok = true, cfg = cfg, version = ver }, proto)
        end
      end
    end
  elseif ev == "timer" and a == state.serverTimerId then
    local cfg = store.loadLabelsCfg()
    local ver = util.versionOf(cfg)
    if ver ~= state.serverVersion then
      state.serverPrevVersion = state.serverVersion
      state.serverVersion = ver
      rednet.broadcast({ cmd = "changed", version = ver }, proto)
    end
    state.serverTimerId = os.startTimer(1)
  end
end

return M
]=]

FILES["/basectl/ui.lua"] = [=[
-- ui.lua  v0.5.0
-- Draws header/footer, clickable server toggle, version line, and app version next to title.

local M = {}

function M.drawHeader(state)
  local w,_ = term.getSize()
  term.setCursorPos(1,1)
  term.setBackgroundColor(colors.blue)
  term.setTextColor(colors.white)
  term.clearLine()
  local title = " Base Control " .. (state.appVersion and ("("..state.appVersion..") ") or "")
  write(title)
  local badge = state.serverOn and "[Server:ON]" or "[Server:OFF]"
  local x = w - #badge + 1
  term.setCursorPos(x,1); write(badge)
  state.headerBtn = { x1 = x, x2 = x + #badge - 1, y = 1 }

  term.setBackgroundColor(colors.black)
  term.setTextColor(colors.lightGray)
  term.setCursorPos(1,2); term.clearLine()
  local cur = state.serverVersion or "-"
  local prev = state.serverPrevVersion or "-"
  local verline = ("Cur:%s  Prev:%s"):format(cur, prev)
  local vx = math.max(1, w - #verline + 1)
  term.setCursorPos(vx, 2); write(verline)
  term.setTextColor(colors.white)
end

function M.drawFooter(help)
  local w,h = term.getSize()
  term.setCursorPos(1,h)
  term.setBackgroundColor(colors.gray)
  term.setTextColor(colors.black)
  term.clearLine()
  term.setCursorPos(1,h)
  if help and #help > w then help = help:sub(1, w) end
  write(help or "[1]Stats  [2]Labels  [3]Server  [4]Utils  [Q]Quit")
  term.setBackgroundColor(colors.black); term.setTextColor(colors.white)
end

function M.maybeHandleHeaderClick(state, x, y, server, store, util, PROTO, NAME)
  local b = state.headerBtn
  if b and y == b.y and x >= b.x1 and x <= b.x2 then
    if state.serverOn then server.stop(state, PROTO, NAME) else server.start(state, store, util, PROTO, NAME) end
    M.drawHeader(state)
    return true
  end
  return false
end

return M
]=]

FILES["/basectl/page_labels.lua"] = [=[
-- page_labels.lua  v0.5.5
-- Labels management UI page (scrolling list, per-monitor editors, defaults editor)

local M = {}

local function clamp(n, lo, hi) if n < lo then return lo elseif n > hi then return hi else return n end end
local function fpad(s, width) s = tostring(s or ""); if #s > width then return s:sub(1, math.max(0,width-1)) .. "…" end; return s .. string.rep(" ", width - #s) end
local function normAlign(a) a = tostring(a or "center"):lower(); if a=="left" or a=="right" or a=="center" then return a end; return "center" end
local COLOR_NAMES = {"white","orange","magenta","lightBlue","yellow","lime","pink","gray","lightGray","cyan","purple","blue","brown","green","red","black"}
local function isValidColorName(name) name=tostring(name or ""); for _,n in ipairs(COLOR_NAMES) do if n==name then return true end end; return false end
local function shortNumberFromName(name) local num = tostring(name or ""):match("(%d+)$"); return num or tostring(name or "?") end
local function normalizeInputName(input) local digits = tostring(input or ""):match("^%s*(%d+)%s*$"); if digits then return "monitor_"..digits end; return input end

function M.reload(state, store)
  state.cfg = store.loadLabelsCfg()
  state.monitors = {}
  for _,e in ipairs(state.cfg.monitors or {}) do table.insert(state.monitors, e) end
  state.monSel = clamp(state.monSel or 1, 1, math.max(1, #state.monitors))
  state.scroll = state.scroll or 0
end

local function drawList(state, ui)
  local w,h = term.getSize()
  ui.drawHeader(state)
  for y=3,6 do term.setCursorPos(1,y); term.setBackgroundColor(colors.black); term.clearLine() end

  local d = state.cfg.defaults or {}
  term.setCursorPos(2,3); write(("Defaults: bg=%s  fg=%s  align=%s"):format(tostring(d.bg or "-"), tostring(d.fg or "-"), tostring(d.align or "center")):sub(1, w-1))
  term.setCursorPos(2,4); write(("Template: %s  autodiscover=%s"):format(tostring(d.default_label_template or "Monitor $n"), tostring(d.autodiscover ~= false)):sub(1, w-1))

  local yStart = 7
  local maxRows = math.max(0, h - yStart - 1)

  local colNo, colLabel = 4, 26
  local colBG, colFG = 6, 6
  local colTS, colPX, colPY = 5, 4, 4

  term.setCursorPos(1,6); term.clearLine(); term.setCursorPos(2,6)
  write(fpad("#", colNo) .. " " .. fpad("Label", colLabel) .. " " .. fpad("BG", colBG) .. " " .. fpad("FG", colFG) .. " " .. fpad("TS", colTS) .. " " .. fpad("PX", colPX) .. " " .. fpad("PY", colPY))

  local total = #state.monitors
  local counterY = (maxRows > 0) and (yStart + maxRows - 1) or (h-2)
  if total == 0 then
    term.setCursorPos(4,yStart); term.clearLine(); write("(none)")
  else
    if state.monSel < state.scroll + 1 then state.scroll = state.monSel - 1 end
    if state.monSel > state.scroll + maxRows then state.scroll = state.monSel - maxRows end
    state.scroll = clamp(state.scroll, 0, math.max(0, total - maxRows))

    for row = 1, maxRows do
      local idx = state.scroll + row
      local y = yStart + row - 1
      term.setCursorPos(2,y); term.clearLine()
      if idx <= total then
        local e = state.monitors[idx]
        local no    = fpad(shortNumberFromName(e.name), colNo)
        local label = fpad(e.label or "", colLabel)
        local bg = fpad(e.bg or "-", colBG)
        local fg = fpad(e.fg or "-", colFG)
        local ts = fpad(e.text_scale and tostring(e.text_scale) or "-", colTS)
        local px = fpad(e.pad_x~=nil and tostring(e.pad_x) or "-", colPX)
        local py = fpad(e.pad_y~=nil and tostring(e.pad_y) or "-", colPY)

        if idx == state.monSel then term.setTextColor(colors.yellow) else term.setTextColor(colors.white) end
        write(no .. " " .. label .. " " .. bg .. " " .. fg .. " " .. ts .. " " .. px .. " " .. py)
        term.setTextColor(colors.white)
      end
    end

    if total > maxRows then
      local barH = math.max(1, math.floor(maxRows * maxRows / total))
      local rel = (state.scroll / math.max(1, total - maxRows))
      local top = yStart + math.floor(rel * (maxRows - barH))
      for i=0,barH-1 do term.setCursorPos(w, top + i); write("|") end
      term.setCursorPos(w-6, counterY); write( ("%d/%d"):format(state.monSel, total) )
    else
      term.setCursorPos(w-6, counterY); write( ("%d/%d"):format(state.monSel, total) )
    end
  end

  local footer = "[A]Add  [E]Edit  [B]BG  [F]FG  [T]Scale  [H]PadX  [V]PadY  [D]Defaults  [S]Save  [R]Reload  [Q]Back"
  if #footer > w then footer = footer:sub(1, w) end
  ui.drawFooter(footer)
end

local function promptScale(util, current)
  local hint = "(0.5..5 or 'auto' to clear)"
  local raw = util.inputPrompt("Text scale "..hint..":", current and tostring(current) or "auto")
  if not raw or raw == "" or raw:lower() == "auto" then return nil end
  local n = tonumber(raw)
  if not n then return current end
  if n < 0.5 then n = 0.5 elseif n > 5 then n = 5 end
  return n
end

local function promptPad(util, label, current)
  local hint = "(integer; negative = left/up, positive = right/down)"
  local raw = util.inputPrompt(label.." "..hint..":", current and tostring(current) or "0")
  if not raw or raw == "" then return current end
  local n = tonumber(raw)
  if not n then return current end
  if n < -50 then n = -50 elseif n > 50 then n = 50 end
  return math.floor(n)
end

local function promptColor(util, label, current)
  local raw = util.inputPrompt(label.." color:", current)
  if not raw or raw == "" then return current end
  if isValidColorName(raw) then return raw end
  return current
end

local function promptAlign(util, current)
  local raw = util.inputPrompt("Align (left/center/right):", current or "center")
  return normAlign(raw)
end

local function editDefaults(state, util, store, server, PROTO)
  local d = state.cfg.defaults or {}
  while true do
    term.setBackgroundColor(colors.black); term.setTextColor(colors.white)
    term.clear(); term.setCursorPos(1,1)
    print("=== Defaults Editor ===")
    print("1) bg              = "..tostring(d.bg))
    print("2) fg              = "..tostring(d.fg))
    print("3) text_scale      = "..tostring(d.text_scale or "auto"))
    print("4) align           = "..tostring(d.align or "center"))
    print("5) pad_x           = "..tostring(d.pad_x or 0))
    print("6) pad_y           = "..tostring(d.pad_y or 0))
    print("7) clear_on_draw   = "..tostring(d.clear_on_draw ~= false))
    print("8) autodiscover    = "..tostring(d.autodiscover ~= false))
    print("9) template        = "..tostring(d.default_label_template or "Monitor $n"))
    print("")
    print("[1-9]=edit  [S]=Save  [Q]=Back")

    local ev,k = os.pullEvent("key")
    if k == keys.q then break
    elseif k == keys.s then
      state.cfg.defaults = d
      store.saveLabelsCfg(state.cfg)
      if server.bumpNow then server.bumpNow(state, store, util, PROTO) end
      break
    elseif k == keys.one then d.bg = promptColor(util, "bg", d.bg)
    elseif k == keys.two then d.fg = promptColor(util, "fg", d.fg)
    elseif k == keys.three then d.text_scale = promptScale(util, d.text_scale)
    elseif k == keys.four then d.align = promptAlign(util, d.align)
    elseif k == keys.five then d.pad_x = promptPad(util, "Pad X", d.pad_x)
    elseif k == keys.six then d.pad_y = promptPad(util, "Pad Y", d.pad_y)
    elseif k == keys.seven then d.clear_on_draw = not (d.clear_on_draw == false)
    elseif k == keys.eight then d.autodiscover = not (d.autodiscover == false)
    elseif k == keys.nine then d.default_label_template = util.inputPrompt("Template:", d.default_label_template or "Monitor $n")
    end
  end
end

function M.run(state, ui, util, store, server, PROTO, NAME)
  M.reload(state, store)
  util.clear(); drawList(state, ui)
  while true do
    local ev,a,b,c = os.pullEvent()
    server.handleEvent(state, ev, a, b, c, store, util, PROTO)

    if ev == "timer" and a == state.serverTimerId then drawList(state, ui) end

    if ev == "mouse_click" then
      if ui.maybeHandleHeaderClick(state, b, c, server, store, util, PROTO, NAME) then drawList(state, ui) end
    elseif ev == "mouse_scroll" then
      local dir = a
      local w,h = term.getSize(); local yStart = 7; local maxRows = math.max(0, h - yStart - 1)
      local total = #state.monitors
      state.scroll = clamp(state.scroll + dir, 0, math.max(0, total - maxRows))
      state.monSel = clamp(state.monSel + dir, 1, math.max(1, total))
      drawList(state, ui)

    elseif ev == "key" then
      local total = #state.monitors
      if a == keys.q then return end
      if a == keys.up then state.monSel = clamp(state.monSel-1, 1, math.max(1,total)); drawList(state, ui) end
      if a == keys.down then state.monSel = clamp(state.monSel+1, 1, math.max(1,total)); drawList(state, ui) end
      if keys.pageUp and a == keys.pageUp then
        local w,h = term.getSize(); local yStart = 7; local maxRows = math.max(0, h - yStart - 1)
        state.monSel = clamp(state.monSel - maxRows, 1, math.max(1,total))
        state.scroll = clamp(state.scroll - maxRows, 0, math.max(0, total - maxRows))
        drawList(state, ui)
      end
      if keys.pageDown and a == keys.pageDown then
        local w,h = term.getSize(); local yStart = 7; local maxRows = math.max(0, h - yStart - 1)
        state.monSel = clamp(state.monSel + maxRows, 1, math.max(1,total))
        state.scroll = clamp(state.scroll + maxRows, 0, math.max(0, total - maxRows))
        drawList(state, ui)
      end
      if keys.home and a == keys.home then state.monSel = 1; state.scroll = 0; drawList(state, ui) end
      if keys["end"] and a == keys["end"] then state.monSel = total; state.scroll = math.max(0, total-1); drawList(state, ui) end

      if a == keys.a then
        local raw = util.inputPrompt("Monitor name (number or full peripheral name):")
        if raw and raw ~= "" then
          local name = normalizeInputName(raw)
          local lab = util.inputPrompt("Label (empty = use template)", "")
          table.insert(state.monitors, { name = name, label = (lab ~= "" and lab or nil) })
          total = #state.monitors; state.monSel = total
          drawList(state, ui)
        end

      elseif a == keys.e then
        local e = state.monitors[state.monSel]
        if e then e.label = util.inputPrompt("Label:", e.label or ""); drawList(state, ui) end

      elseif a == keys.b then
        local e = state.monitors[state.monSel]
        if e then e.bg = promptColor(util, "bg", e.bg); drawList(state, ui) end

      elseif a == keys.f then
        local e = state.monitors[state.monSel]
        if e then e.fg = promptColor(util, "fg", e.fg); drawList(state, ui) end

      elseif a == keys.t then
        local e = state.monitors[state.monSel]
        if e then e.text_scale = promptScale(util, e.text_scale); drawList(state, ui) end

      elseif a == keys.h then
        local e = state.monitors[state.monSel]
        if e then e.pad_x = promptPad(util, "Pad X", e.pad_x); drawList(state, ui) end

      elseif a == keys.v then
        local e = state.monitors[state.monSel]
        if e then e.pad_y = promptPad(util, "Pad Y", e.pad_y); drawList(state, ui) end

      elseif a == keys.d then
        editDefaults(state, util, store, server, PROTO)
        M.reload(state, store)
        drawList(state, ui)

      elseif a == keys.x then
        if total > 0 then table.remove(state.monitors, state.monSel); total = #state.monitors; state.monSel = clamp(state.monSel,1,math.max(1,total)) end
        drawList(state, ui)

      elseif a == keys.s then
        state.cfg.monitors = state.monitors
        store.saveLabelsCfg(state.cfg)
        if server.bumpNow then server.bumpNow(state, store, util, PROTO) end
        drawList(state, ui)

      elseif a == keys.r then
        M.reload(state, store); drawList(state, ui)
      end
    end
  end
end

return M
]=]

FILES["/basectl/page_server.lua"] = [=[
-- page_server.lua  v0.1.0
-- Shows live output of LabelsConfigServer: status, versions, and served config.

local M = {}

local function ctrlLine(state)
  local on = state.serverOn and "ON" or "OFF"
  local cur = state.serverVersion or "-"
  local prev = state.serverPrevVersion or "-"
  return string.format("Server:%s  Cur:%s  Prev:%s", on, cur, prev)
end

local function lookupSelf(proto, name)
  return rednet.lookup(proto, name)
end

local function fetch(proto, hostID, known_version)
  if hostID then
    if known_version then
      rednet.send(hostID, { cmd = "get_if_new", known_version = known_version }, proto)
    else
      rednet.send(hostID, { cmd = "get" }, proto)
    end
  else
    rednet.broadcast({ cmd = "get" }, proto)
  end
  local timeout = os.startTimer(1.5)
  while true do
    local ev,a,b,c = os.pullEvent()
    if ev == "rednet_message" then
      local sender,msg,pr = a,b,c
      if pr == proto and type(msg) == "table" and (msg.ok or msg.cfg) then
        return sender, msg.cfg, msg.version
      end
    elseif ev == "timer" and a == timeout then
      return nil,nil,nil
    end
  end
end

local function draw(state, ui, text)
  ui.drawHeader(state)
  term.setCursorPos(2,3); write(ctrlLine(state))
  term.setCursorPos(2,5); write("Served config (preview):")
  local w,h = term.getSize()
  local y = 6
  for line in text:gmatch("([^
]+)
?") do
    if y >= h then break end
    term.setCursorPos(2,y); write(line)
    y = y + 1
  end
  ui.drawFooter("[R]Refresh  [Q]Back")
end

function M.run(state, ui, util, store, server, PROTO, NAME)
  util.clear()
  local host = state.serverOn and lookupSelf(PROTO, NAME) or nil
  local _, cfg, ver = fetch(PROTO, host, nil)
  if cfg then state.serverVersion = ver or state.serverVersion end
  local preview = cfg and textutils.serialize(cfg) or "(server off or no reply)"
  util.clear(); draw(state, ui, preview)
  while true do
    local ev,a,b,c = os.pullEvent()
    server.handleEvent(state, ev, a, b, c, store, util, PROTO)
    if ev == "timer" and a == state.serverTimerId then ui.drawHeader(state) end
    if ev == "mouse_click" then
      if ui.maybeHandleHeaderClick(state, b, c, server, store, util, PROTO, NAME) then
        host = state.serverOn and lookupSelf(PROTO, NAME) or nil
        _, cfg, ver = fetch(PROTO, host, nil)
        if cfg then state.serverVersion = ver or state.serverVersion end
        preview = cfg and textutils.serialize(cfg) or "(server off or no reply)"
        util.clear(); draw(state, ui, preview)
      end
    elseif ev == "key" then
      if a == keys.q then return end
      if a == keys.r then
        host = state.serverOn and lookupSelf(PROTO, NAME) or nil
        _, cfg, ver = fetch(PROTO, host, nil)
        if cfg then state.serverVersion = ver or state.serverVersion end
        preview = cfg and textutils.serialize(cfg) or "(server off or no reply)"
        util.clear(); draw(state, ui, preview)
      end
    end
  end
end

return M
]=]

FILES["/basectl/page_stats.lua"] = [=[
-- page_stats.lua  v0.2.0
-- Example control surface for generators over the 'base_ctrl' protocol

local M = {}
local CTRL_PROTOCOL = "base_ctrl"

local function ctrlLookup(host)
  return rednet.lookup(CTRL_PROTOCOL, host)
end

local function ctrlToggle(host)
  local id = ctrlLookup(host)
  if not id then return false, "not found" end
  rednet.send(id, { cmd = "toggle" }, CTRL_PROTOCOL)
  local _, reply = rednet.receive(CTRL_PROTOCOL, 2)
  if reply and reply.ok then return true, reply.status end
  return true, nil
end

local function ctrlStatus(host)
  local id = ctrlLookup(host)
  if not id then return nil, "not found" end
  rednet.send(id, { cmd = "status" }, CTRL_PROTOCOL)
  local _, reply = rednet.receive(CTRL_PROTOCOL, 1.5)
  if reply and reply.ok then return reply.status end
  return nil
end

local function draw(state, ui)
  ui.drawHeader(state)
  term.setCursorPos(2,3); write("Generators:")
  local list = state.baseCfg.generators or {}
  if #list == 0 then
    term.setCursorPos(4,5); write("(no generators configured; edit /base_control_config.lua)")
  else
    for i, g in ipairs(list) do
      local y = 4 + i
      term.setCursorPos(2,y)
      if i == state.genSel then term.setTextColor(colors.yellow) else term.setTextColor(colors.white) end
      local status = ctrlStatus(g.host) or "?"
      write( string.format("%s  [%s]  (%s)", g.name, status, g.host or "-") )
      term.setTextColor(colors.white)
    end
  end
  ui.drawFooter("Up/Down select  [Space/Enter]=Toggle  [R]Refresh  [Q]Back")
end

function M.run(state, ui, util, store, server, PROTO, NAME)
  util.clear(); draw(state, ui)
  local list = state.baseCfg.generators or {}
  while true do
    local ev,a,b,c = os.pullEvent()
    server.handleEvent(state, ev, a, b, c, store, util, PROTO)
    if ev == "timer" and a == state.serverTimerId then ui.drawHeader(state) end
    if ev == "mouse_click" then
      if ui.maybeHandleHeaderClick(state, b, c, server, store, util, PROTO, NAME) then util.clear(); draw(state, ui) end
    elseif ev == "key" then
      if a == keys.q then return end
      if a == keys.up then state.genSel = util.clamp((state.genSel or 1)-1, 1, math.max(1,#list)); util.clear(); draw(state, ui) end
      if a == keys.down then state.genSel = util.clamp((state.genSel or 1)+1, 1, math.max(1,#list)); util.clear(); draw(state, ui) end
      if a == keys.space or a == keys.enter then
        local g = list[state.genSel]
        if g then ctrlToggle(g.host); util.clear(); draw(state, ui) end
      end
      if a == keys.r then util.clear(); draw(state, ui) end
    end
  end
end

return M
]=]

FILES["/basectl/page_utils.lua"] = [=[
-- page_utils.lua  v0.1.0
-- Pocket utilities: modem tools, network ping, broadcast, label set, and info panel.

local M = {}

local function openAllModems()
  local opened = 0
  for _, side in ipairs(peripheral.getNames()) do
    if peripheral.getType(side) == "modem" then
      if not rednet.isOpen(side) then rednet.open(side); opened = opened + 1 end
    end
  end
  return opened
end

local function closeAllModems()
  local closed = 0
  for _, side in ipairs(rs.getSides()) do
    if rednet.isOpen(side) then rednet.close(side); closed = closed + 1 end
  end
  return closed
end

local function lookupHost(proto, name)
  return rednet.lookup(proto, name)
end

local function pingServer(proto, name)
  local id = lookupHost(proto, name)
  if not id then return false, "not in DNS" end
  rednet.send(id, { cmd = "get" }, proto)
  local _, msg = rednet.receive(proto, 1.5)
  if type(msg) == "table" and (msg.ok or msg.cfg) then
    return true, (msg.version or "?")
  end
  return false, "no reply"
end

local function openSidesList()
  local list = {}
  for _, side in ipairs(rs.getSides()) do if rednet.isOpen(side) then table.insert(list, side) end end
  return table.concat(list, ", ")
end

local function draw(state, ui, status)
  ui.drawHeader(state)
  local w,h = term.getSize()
  term.setCursorPos(2,3); write(string.format("ID:%d  Label:%s  Ver:%s", os.getComputerID(), os.getComputerLabel() or "(nil)", state.appVersion or "-"))
  term.setCursorPos(2,4); write(string.format("Proto:%s  Host:%s", state.PROTO, state.NAME))
  term.setCursorPos(2,5); write("Rednet open: "..(openSidesList() ~= "" and openSidesList() or "(none)"))
  term.setCursorPos(2,7); write("Actions: [O]pen modems  [C]lose modems  [P]ing server  [B]roadcast changed  [L]ist peripherals  [K] set label  [R]efresh  [Q]Back")

  if status and status ~= "" then
    term.setCursorPos(2,h-2); term.clearLine(); write("Status: "..status)
  end
  ui.drawFooter("[1]Stats  [2]Labels  [3]Server  [4]Utils  [Q]Quit")
end

function M.run(state, ui, util, store, server, PROTO, NAME)
  state.PROTO, state.NAME = PROTO, NAME
  util.clear(); draw(state, ui, "")
  while true do
    local ev,a,b,c = os.pullEvent()
    server.handleEvent(state, ev, a, b, c, store, util, PROTO)
    if ev == "timer" and a == state.serverTimerId then draw(state, ui, "") end

    if ev == "key" then
      if a == keys.q then return end
      if a == keys.o then local n = openAllModems(); draw(state, ui, ("opened %d modem side(s)"):format(n)) end
      if a == keys.c then local n = closeAllModems(); draw(state, ui, ("closed %d modem side(s)"):format(n)) end
      if a == keys.p then local ok, info = pingServer(PROTO, NAME); draw(state, ui, ok and ("server OK v="..info) or ("ping failed: "..info)) end
      if a == keys.b then rednet.broadcast({ cmd = "changed" }, PROTO); draw(state, ui, "broadcasted changed") end
      if a == keys.l then
        util.clear(); ui.drawHeader(state)
        print("Peripherals:")
        for _,n in ipairs(peripheral.getNames()) do print(" - "..n.." ("..(peripheral.getType(n) or "?")..")") end
        ui.drawFooter("[Any key] Back")
        os.pullEvent("key"); util.clear(); draw(state, ui, "")
      end
      if a == keys.k then
        local new = util.inputPrompt("New computer label:", os.getComputerLabel() or "")
        if new and new ~= "" then os.setComputerLabel(new); draw(state, ui, "label set") else draw(state, ui, "label unchanged") end
      end
      if a == keys.r then draw(state, ui, "refreshed") end
    elseif ev == "mouse_click" then
      if ui.maybeHandleHeaderClick(state, b, c, server, store, util, PROTO, NAME) then draw(state, ui, "") end
    end
  end
end

return M
]=]

FILES["/basectl/main.lua"] = [=[
-- main.lua  v0.6.1
-- BaseControl entrypoint. Menu: Stats / Labels / Server / Utils. Starts LabelsConfigServer.

local APP_VER = "v0.6.1"

local util   = dofile("/basectl/util.lua")
local store  = dofile("/basectl/store.lua")
local server = dofile("/basectl/server.lua")
local ui     = dofile("/basectl/ui.lua")
local pageL  = dofile("/basectl/page_labels.lua")
local pageS  = dofile("/basectl/page_stats.lua")
local pageSrv= dofile("/basectl/page_server.lua")
local pageU  = dofile("/basectl/page_utils.lua")

local PROTO = "labels_cfg"
local NAME  = "labels-hub"

local state = {
  page = "menu",
  appVersion = APP_VER,
  serverOn = false,
  serverVersion = nil,
  serverPrevVersion = nil,
  serverTimerId = nil,
  headerBtn = nil,
  cfg = nil,
  baseCfg = nil,
  monitors = {}, monSel = 1,
  generators = {}, genSel = 1,
}

local function drawMenu()
  util.clear(); ui.drawHeader(state)
  local y = util.centerY()-1
  term.setCursorPos(3,y);     write("1) Stats")
  term.setCursorPos(3,y + 1); write("2) Labels")
  term.setCursorPos(3,y + 2); write("3) Server")
  term.setCursorPos(3,y + 3); write("4) Utils")
  ui.drawFooter()
end

local function handleMenu()
  drawMenu()
  while true do
    local ev,a,b,c = os.pullEvent()
    server.handleEvent(state, ev, a, b, c, store, util, PROTO)
    if ev == "timer" and a == state.serverTimerId then ui.drawHeader(state) end
    if ev == "mouse_click" then
      if ui.maybeHandleHeaderClick(state, b, c, server, store, util, PROTO, NAME) then drawMenu() end
    elseif ev == "key" then
      if a == keys.one then state.page = "stats"; return
      elseif a == keys.two then state.page = "labels"; return
      elseif a == keys.three then state.page = "server"; return
      elseif a == keys.four then state.page = "utils"; return
      elseif a == keys.q then state.page = "quit"; return end
    end
  end
end

local function main()
  store.ensureFiles()
  util.clear()
  local ok, err = pcall(util.openWirelessOrError)
  if not ok then util.clear(); print("ERROR: "..tostring(err)); sleep(3); return end
  server.start(state, store, util, PROTO, NAME)
  state.baseCfg = store.loadBaseCfg()

  while true do
    if state.page == "menu" then handleMenu()
    elseif state.page == "stats" then pageS.run(state, ui, util, store, server, PROTO, NAME); state.page = "menu"
    elseif state.page == "labels" then pageL.run(state, ui, util, store, server, PROTO, NAME); state.page = "menu"
    elseif state.page == "server" then pageSrv.run(state, ui, util, store, server, PROTO, NAME); state.page = "menu"
    elseif state.page == "utils" then pageU.run(state, ui, util, store, server, PROTO, NAME); state.page = "menu"
    elseif state.page == "quit" then break else state.page = "menu" end
  end

  util.clear(); print("Base Control exited.")
end

main()
]=]

-- Write all files to /basectl
for path, content in pairs(FILES) do write_file(path, content) end

-- Emit /basectl/PKG.lua manifest for updater
local function emit_pkg_manifest()
  local out = { "local PKG = { files = {} }" }
  for path, content in pairs(FILES) do
    table.insert(out, ("PKG.files[%q] = [=[%s]=]"):format(path, content))
  end
  table.insert(out, "return PKG")
  write_file("/basectl/PKG.lua", table.concat(out))
end
emit_pkg_manifest()

-- Updater scripts
write_file("/basectl/update.lua", [=[
-- /basectl/update.lua : rewrite all BaseControl files from PKG.lua
local function write_file(path, content)
  local dir = fs.getDir(path)
  if dir ~= "" and not fs.exists(dir) then fs.makeDir(dir) end
  local f = fs.open(path, "w"); f.write(content); f.close()
end
local ok, PKG = pcall(dofile, "/basectl/PKG.lua")
if not ok or type(PKG) ~= "table" or type(PKG.files) ~= "table" then
  print("PKG.lua missing or invalid. Re-run basectl_install.")
  return
end
for path, content in pairs(PKG.files) do write_file(path, content) end
print("Update complete. Restart /basectl/main.")
]=])

write_file("/basectl_update.lua", [=[
-- /basectl_update.lua : convenience wrapper
shell.run("/basectl/update")
]=])

print("Install complete. Run /basectl/main to launch Base Control.")
